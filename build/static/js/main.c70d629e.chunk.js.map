{"version":3,"sources":["Components/Cards.js","Components/Home.js","Assets/display.js","Assets/template.js","App.js","reportWebVitals.js","index.js"],"names":["Memes","useState","post","setPost","offset","setOffset","pageCount","setPageCount","srcset","image","size","rows","cols","src","srcSet","useEffect","axios","get","then","response","content","data","memes","database","slice","console","log","Math","ceil","length","className","Fab","variant","color","to","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selectedPage","selected","containerClassName","activeClassName","ImageList","sx","width","height","rowHeight","map","item","ImageListItem","url","alt","name","loading","ImageListItemBar","title","actionIcon","IconButton","id","Homescreen","Box","display","flexWrap","m","padding","Paper","elevation","Imager","props","imgUrl","AppPage","setItem","input","setInput","finalImg","setfinalImg","dataBase","details","meme_name","exid","match","params","Object","values","forEach","element","box_count","handleClick","a","preventDefault","box","Array","fill","i","fields","FormData","append","method","headers","catch","error","onSubmit","parseInt","number","index","TextField","label","onChange","t","target","value","clickHandle","LoadingButton","endIcon","loadingPosition","type","imgId","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c70d629e.chunk.js","sourcesContent":["import {ImageList, ImageListItem, ImageListItemBar, IconButton} from '@material-ui/core';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport Fab from '@mui/material/Fab';\r\nimport axios from 'axios';\r\nimport { useState, useEffect } from 'react';\r\nimport './components.css';\r\nimport ReactPaginate from 'react-paginate';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Memes() {\r\n\r\n    const baseUrl = 'https://api.imgflip.com/get_memes';\r\n\r\n    const [post, setPost] = useState([]);\r\n    const [offset, setOffset] = useState(0);\r\n    // const [perPage] = useState(20);\r\n    const [pageCount, setPageCount] = useState(0);\r\n\r\n    const handlePageClick = (e) => {\r\n        const selectedPage = e.selected;\r\n        setOffset(selectedPage + 1)\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(baseUrl).then((response) => {\r\n            const content = response.data.data.memes\r\n            const database = content.slice(offset, offset + 20)\r\n            content? setPost(database) : console.log('f');\r\n            setPageCount(Math.ceil(response.data.data.memes.length / 20))\r\n        });\r\n        }, [offset]);\r\n\r\n    function srcset(image, size, rows = 1, cols = 1) {\r\n        return {\r\n            src: `${image}?w=${size * cols}&h=${size * rows}&fit=crop&auto=format`,\r\n            srcSet: `${image}?w=${size * cols}&h=${\r\n            size * rows\r\n            } &fit=crop&auto=format&dpr=2 2x`,\r\n        };\r\n    }\r\n\r\nreturn (\r\n    <div className=\"Card\">\r\n        <Fab variant=\"extended\" size=\"medium\" color=\"primary\" aria-label=\"add\">\r\n            <Link to=\"/\" className=\"Links\"> Home </Link>\r\n        </Fab>\r\n        \r\n        <ReactPaginate\r\n            previousLabel={\"<\"}\r\n            nextLabel={\">\"}\r\n            breakLabel={\"break-me\"}\r\n            pageCount={pageCount}\r\n            marginPagesDisplayed={2}\r\n            pageRangeDisplayed={5}\r\n            onPageChange={handlePageClick}\r\n            containerClassName={\"pagination\"}\r\n            activeClassName={\"active\"} />\r\n\r\n\r\n        <ImageList sx={{ width: 500, height: 450 }} cols={5} rowHeight={121}>\r\n            {post.map((item) => (\r\n                <ImageListItem key={item.url} cols={item.cols || 1} rows={item.rows || 1}>\r\n                    <img {...srcset(item.url, 100, item.rows, item.cols)} alt={item.name} loading=\"lazy\" className=\"item\"/>\r\n                    <ImageListItemBar\r\n                        title={item.name}\r\n                        actionIcon={\r\n                        <IconButton sx={{ color: 'rgba(255, 255, 255, 0.54)' }} aria-label={`info about ${item.name}`}>\r\n                            <Link to={`/main/${item.id}`}> <InfoIcon/> </Link>\r\n                        </IconButton>\r\n                        }\r\n                    />         \r\n                </ImageListItem> \r\n            ))}\r\n        </ImageList>\r\n\r\n    </div>\r\n    )\r\n}","import { Link } from 'react-router-dom'\r\nimport Box from '@mui/material/Box'  \r\nimport Paper from '@mui/material/Paper'\r\nimport Fab from '@mui/material/Fab';\r\nimport './Cards'\r\nimport './components.css'\r\n\r\nexport default function Homescreen() {\r\n    return (\r\n        <div className=\"paper\">\r\n\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    flexWrap: 'wrap',\r\n                    '& > :not(style)': {\r\n                    m: 1,\r\n                    width: 200,\r\n                    height: 200,\r\n                    padding: 5,\r\n                    },\r\n                }}\r\n                >\r\n                <Paper elevation={3}>\r\n                <h2 className=\"home\"> MEMIFY </h2> <br/> <br/>\r\n                <Fab variant=\"extended\" size=\"medium\" color=\"primary\" aria-label=\"add\">\r\n                    <Link to=\"/card\" className=\"pic-button\"> Gallery </Link>\r\n                </Fab>\r\n                </Paper>\r\n            </Box>\r\n        </div>\r\n    )\r\n}","export default function Imager(props) {\r\n    return (\r\n        <div className=\"project\">\r\n            <img src={props.imgUrl} alt=\"final\" className=\"finalImg\"/>\r\n        </div>\r\n    )\r\n}","import axios from 'axios';\r\nimport {useState, useEffect} from 'react';\r\nimport { TextField } from '@material-ui/core';\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport Fab from '@mui/material/Fab';\r\nimport './assets.css'\r\nimport Imager from './display';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function AppPage(props) {\r\n    const [item, setItem] = useState(0)\r\n    const [input, setInput] = useState([])\r\n    const [finalImg, setfinalImg] = useState()\r\n    useEffect(() => {\r\n        const url = \"https://api.imgflip.com/get_memes\"\r\n        axios.get(url).then((response) => {\r\n            const dataBase = response.data.data.memes\r\n            setItem(dataBase)\r\n        });\r\n    }, [])\r\n\r\n    let details = 0;\r\n    let url = \"\";\r\n    let meme_name = \"\";\r\n    const exid = props.match.params.id\r\n\r\n    // checking for matching id and saving it in some params\r\n    const db = Object.values(item)\r\n    db.forEach(element => {\r\n        if(element.id === exid) {\r\n            details = element.box_count\r\n            url = element.url\r\n            meme_name = element.name \r\n        }\r\n    });\r\n\r\n    const clickHandle=(e,number)=>{\r\n        const t=[...input];\r\n        t[number]=e.target.value;\r\n        setInput(t);\r\n    }\r\n\r\n    const handleClick = async(e) => {\r\n        \r\n        e.preventDefault()\r\n        const box=Array(details).fill(\"\");\r\n        for(let i=0;i<details;i++){\r\n            box[i]={'text':input[i]}\r\n        }\r\n\r\n        var fields=new FormData();\r\n        fields.append('template_id',exid);\r\n        fields.append('username','ShreyParekh');\r\n        fields.append('password','drawings24?');\r\n        for(let i=0;i<details;i++){\r\n            fields.append(`boxes[${i}][text]`,input[i]);\r\n        }\r\n\r\n        axios({\r\n            method:'POST',\r\n            url: 'https://api.imgflip.com/caption_image',\r\n            data: fields,\r\n            headers: {'Content-Type':'multipart/form-data'}\r\n        })\r\n        .then((response)=>setfinalImg(response.data.data.url))\r\n        .catch((error)=>console.log(error));\r\n \r\n    }\r\n\r\n    return (\r\n        <div className=\"template\"> \r\n            <div className=\"Nav-bar\"> \r\n            <Fab variant=\"extended\" size=\"medium\" color=\"primary\" aria-label=\"add\">\r\n                <Link to=\"../../\" className=\"Links\"> Home </Link>\r\n            </Fab>\r\n            <Fab variant=\"extended\" size=\"medium\" color=\"primary\" aria-label=\"add\">\r\n                <Link to=\"../card\" className=\"Links\"> Gallery </Link>\r\n            </Fab>\r\n            \r\n            </div> \r\n            <div className=\"header\"> <h3> {meme_name} </h3> </div>           \r\n            <div className=\"content\"> <img src={url} className=\"image_meme\" alt={meme_name}/> \r\n            <div className=\"form\">\r\n                <form onSubmit={handleClick}>\r\n                {Array(parseInt(details)).fill(0).map((number, index)=>(\r\n                    <div key={index} className=\"form\">\r\n                        <TextField id=\"outlined-required\" variant=\"outlined\" label={\"Box \"+(index+1)} onChange={(e) => clickHandle(e, index)}  className=\"inputs\"/>\r\n                    </div>\r\n                    ))}\r\n                    <div className=\"sender\"> \r\n                    <LoadingButton endIcon={<SendIcon/>} loadingPosition=\"end\" variant=\"contained\" type=\"Submit\">\r\n                        Send\r\n                    </LoadingButton>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            </div> \r\n\r\n            {finalImg? <Imager imgUrl={finalImg} imgId={exid}/>:null}\r\n        </div>\r\n    )\r\n}","import './App.css';\nimport Homescreen from './Components/Home';\nimport Memes from './Components/Cards';\nimport {Route, BrowserRouter, Switch} from 'react-router-dom';\nimport AppPage from './Assets/template';\nimport Imager from './Assets/display';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" exact component={Homescreen}/> \n          <Route path=\"/card\" component={Memes}/> \n          <Route path=\"/main/:id\" component={AppPage}></Route>  \n          <Route path=\"/image/:exid\" component={Imager}></Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}